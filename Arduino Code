/*
    The Magic Ball by 2t2l
*/
#include <TheAirBoard.h>
#include <Wire.h>
#include <MPU6050.h>

MPU6050 mpu;


// Leds Airboard

const int ledR = 9;
const int ledB = 6;
const int ledG = 5;

// Timers
unsigned long timer = 0;
float timeStep = 0.01;

// Pitch, Roll and Yaw values
float pitch = 0;
float roll = 0;
float yaw = 0;



void setup()
{
  Serial.begin(57600);
  pinMode(ledR, OUTPUT);
  pinMode(ledG, OUTPUT);
  pinMode(ledB, OUTPUT);


  // Initialize MPU6050
  while (!mpu.begin(MPU6050_SCALE_2000DPS, MPU6050_RANGE_2G))
  {
    Serial.println("Could not find a valid MPU6050 sensor, check wiring!");
    delay(500);
  }

  // Calibrate gyroscope. The calibration must be at rest.
  // If you don't want calibrate, comment this line.
  mpu.calibrateGyro();

  // Set threshold sensivty. Default 3.
  // If you don't want use threshold, comment this line or set 0.
  mpu.setThreshold(3);
}

void loop()
{
  {
    
  // ACCELERATION

  Vector normAccel = mpu.readNormalizeAccel();

  Serial.print("Xacc ");
  Serial.println(normAccel.XAxis);
  Serial.print("Yacc ");
  Serial.println(normAccel.YAxis);
  Serial.print("Zacc ");
  Serial.println(normAccel.ZAxis);

  timer = millis();

  // Read normalized values
  Vector norm = mpu.readNormalizeGyro();

  // Calculate Pitch, Roll and Yaw
  pitch = pitch + norm.YAxis * timeStep;
  roll = roll + norm.XAxis * timeStep;
  yaw = yaw + norm.ZAxis * timeStep;

  // Output raw
  Serial.print("Xa ");
  Serial.println(pitch);
  Serial.print("Ya ");
  Serial.println(roll);
  Serial.print("Za ");
  Serial.println(yaw);

  // Wait to full timeStep period
  delay((timeStep * 1000) - (millis() - timer));

  }

  while (Serial.available()) {


    int valeur1 = Serial.parseInt();
    int valeur2 = Serial.parseInt();
    int valeur3 = Serial.parseInt();


    // traitement

    if (Serial.read()) {

      analogWrite(ledG, valeur1);

      analogWrite(ledB, valeur2);

      analogWrite(ledR, valeur3);


    }
  }
        delay (10);
}
